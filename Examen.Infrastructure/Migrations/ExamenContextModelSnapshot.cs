// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    partial class ExamenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Activite", b =>
                {
                    b.Property<int>("ActiviteId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiviteId"));

                    b.Property<int>("ActivitiType")
                        .HasColumnType("int");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<string>("TypeService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiviteId");

                    b.ToTable("activites");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Client", b =>
                {
                    b.Property<int>("Identifiant")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifiant"));

                    b.Property<int>("ConseillerFk")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifiant");

                    b.HasIndex("ConseillerFk");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Conseiller", b =>
                {
                    b.Property<int>("ConseillerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConseillerId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConseillerId");

                    b.ToTable("conseillers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Pack", b =>
                {
                    b.Property<int>("PackId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackId"));

                    b.Property<int>("ActiviteId")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duree")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<string>("IntitulePack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbPlaces")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("PackId");

                    b.HasIndex("ActiviteId");

                    b.ToTable("packs");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Reservation", b =>
                {
                    b.Property<int>("ClientFk")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("PackFk")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("NbPersonnes")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("ClientFk", "PackFk", "DateReservation");

                    b.HasIndex("PackFk");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Activite", b =>
                {
                    b.OwnsOne("Examen.ApplicationCore.Domain.Zone", "Zone", b1 =>
                        {
                            b1.Property<int>("ActiviteId")
                                .HasMaxLength(15)
                                .HasColumnType("int");

                            b1.Property<string>("Pays")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ville")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ActiviteId");

                            b1.ToTable("activites");

                            b1.WithOwner()
                                .HasForeignKey("ActiviteId");
                        });

                    b.Navigation("Zone")
                        .IsRequired();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Client", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Conseiller", "conseiller")
                        .WithMany("clients")
                        .HasForeignKey("ConseillerFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conseiller");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Pack", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Activite", "activite")
                        .WithMany("packs")
                        .HasForeignKey("ActiviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("activite");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Reservation", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Client", "lemsi")
                        .WithMany("lemsiii")
                        .HasForeignKey("ClientFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Pack", "Pack")
                        .WithMany("Reservations")
                        .HasForeignKey("PackFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");

                    b.Navigation("lemsi");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Activite", b =>
                {
                    b.Navigation("packs");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Client", b =>
                {
                    b.Navigation("lemsiii");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Conseiller", b =>
                {
                    b.Navigation("clients");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Pack", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
