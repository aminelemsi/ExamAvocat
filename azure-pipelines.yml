trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: |
    # Construire l'image Docker avec un tag
    docker build -t aminelemsi/app-examavocat:latest .
  displayName: 'Build Docker image'

- task: Docker@2
  inputs:
    command: 'push'
    containerRegistry: 'docker-hub-connexion'
    repository: 'aminelemsi/app-examavocat'
    tags: 'latest'
  displayName: 'Push Docker image to container registry'
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: docker-hub-connexion

# Commande Docker pour scanner l'image avec Trivy
- script: |
    docker run --rm \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -v $(System.DefaultWorkingDirectory):/root/.cache/ \
        aquasec/trivy:latest image 
      --format sarif \
      --output trivy-results.sarif \
      aminelemsi/app-examavocat:latest

  displayName: 'Scan Docker image with Trivy'

# Publier les r√©sultats du scan Trivy en tant qu'artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'trivy-results.json'
    artifactName: 'TrivyScanResults'
    publishLocation: 'pipeline'